<!-- THIS CUSTOM FILE NO LONGER IN USE AS OF 2.9.1 UPGRADE -->

[%
# Org Unit Selector Widget :
#   INCLUDE build_org_selector id='selector-id' name='selector-name' 
#       value=org_id show_loc_groups=1/0 can_have_vols_only=1/0
#
# NOTE: DO NOT USE PROCESS
# Use of PROCESS results in internal variables, such as value or korg_unit, to "leak" out

# 
# This is a modified version of opac/parts/org_selector.tt2 - there was a naming conflict with the 'org_unit' variable
# that I couldn't figure out at the time I was first trying it out


PROCESS get_library;

BLOCK build_org_selector;
    node_stack = [{org => korg_unit || ctx.aouct_tree || ctx.aou_tree}];
    inherited_vis = ctx.get_cgf('opac.korg_unit.non_inherited_visibility').enabled == 'f';

    IF !name; 
        name = loc_name;
    END;
    IF !value;
        value = loc_value;
    END;
    %]
    
    <div class="branchpicker">
	<select [% IF id %] id='[% id %]' [% END -%]
            title='[% arialabel || l("Select Library") %]' 
            name='[% name %]' class="org_selector_dropdown">
    [% 
        WHILE node_stack.size > 0; 
            node = node_stack.pop();
            korg_unit = node.org;
            loc_grp = node.loc_grp;
            ou_id = korg_unit.id;
            css_class = '';
            disabled = '';
            selected = '';
            visible = korg_unit.opac_visible == 't';

            # org and all children are invisible.
            NEXT IF !visible AND inherited_vis AND !ctx.is_staff;

            IF !loc_grp; # processing an org unit

                top_loc_groups = [];
                IF show_loc_groups;
                    # add the location groups that sort below the child org units
                    FOR grp IN ctx.copy_location_groups.$ou_id.reverse;
                        IF grp.top == 't';
                            top_loc_groups.push(grp);
                        ELSE;
                            node_stack.push({org => korg_unit, loc_grp => grp});
                        END;
                    END;
                END;

                # add the child org units
                FOR child IN korg_unit.children.reverse;
                    node_stack.push({org => child});
                END;

                # add the location groups that sort to the top
                # above the child org units
                FOR grp IN top_loc_groups;
                    node_stack.push({org => korg_unit, loc_grp => grp});
                END;

            END;

            # This org unit is not publicly visible (though its children may be).
            NEXT UNLESS ctx.is_staff OR visible;

            node_value = ou_id;
            IF loc_grp;
                node_value = node_value _ ':' _ loc_grp.id; 
                css_class = 'class="loc_grp"';
            ELSE;
                css_class = 'class="korg_unit"';
            END;

            IF can_have_vols_only AND korg_unit.ou_type.can_have_vols != 't';
                disabled = 'disabled="disabled"';
                selected = '';
            ELSIF node_value == value;
                selected = 'selected="selected"';
            END; 

            pad_depth = 0;

            # copy loc groups appear as children of the owning org unit
            SET pad_depth = pad_depth + 1 IF loc_grp;

            # determine the depth by calculating the distance from the root
            porg = ctx.get_aou(korg_unit.parent_ou);
            WHILE porg;
                SET pad_depth = pad_depth + 1 IF porg.opac_visible == 't' OR ctx.is_staff;
                porg = ctx.get_aou(porg.parent_ou);
            END;

            pad_depth = pad_depth * 2;
            display_name = loc_grp ? loc_grp.name : korg_unit.name %]
			[% IF node_value == 1 %]
			    [% display_name = "All PINES Libraries" %]
		    [% END %]			

            <option value='[% node_value %]' [% selected %] [% disabled %] [% css_class %]> 
                [% '&nbsp;' FOR [0..pad_depth]; display_name | html %]
            </option> 

        [% END %]
    </select>
    </div>


[% END %]

